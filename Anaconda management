Managing Anaconda and multiple environments
Source of this file is from http://conda.pydata.org/docs/py2or3.html#use-a-different-version-of-python
Create a Python 3.5 environment


To create a new environment with a different version of Python, use the conda create command. In this example, we’ll make the new environment for Python 3.5:

$ conda create -n py35 python=3.5 anaconda

Here, the ‘py35’ is the name of the environment you want to create, and ‘anaconda’ is the meta-package that includes all of the actual Python packages comprising the Anaconda distribution. When creating a new environment and installing Anaconda, you can specify the exact package and Python versions, for example, numpy=1.7 or python=3.5.
Create a Python 2.7 environment

In this example, we’ll make a new environment for Python 2.7:

$ conda create -n py27 python=2.7 anaconda

Update or Upgrade Python

If you are in an environment with Python version 3.4.2, this command will update Python to 3.4.3, which is the latest version in the 3.4 branch:

$ conda update python
////////////


Create an environment

In order to manage environments, we need to create at least two so you can move or switch between them.

To create a new environment, use the conda create command, followed by any name you wish to call it:

conda create --name snowflakes biopython

When conda asks you

proceed ([y]/n)?

Type “y” for “yes.”

conda create --name bunnies python=3 astroid babel

This will create a second new environment named /envs/bunnies with Python 3 and Astroid and Babel installed.
///////////////////////////////


Change environments (activate/deactivate)

Linux, OS X: source deactivate
Windows: deactivate

You can also use the conda environments list command as follows:

conda env list

The list of all environments will be the same with either command.
